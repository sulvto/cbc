options {
    STATIC = false;
    DEBUG_PARSER = true;
    UNICODE_INPUT = true;
    JDK_VERSION = "1.8";
}

// 保留字
TOKEN : {
        <VOID : "void">
    | <CHAR : "char">
    | <SHORT : "short">
    | <INT : "int">
    | <LONG : "long">
    | <STRUCT : "struct">
    | <UNION : "union">
    | <ENUM : "ENUM">
    | <STATIC : "static">
    | <EXTERN : "extern">
    | <CONST : "const">
    | <SIGNED : "signed">
    | <UNSIGNED : "unsigned">
    | <IF : "if">
    | <ELSE : "else">
    | <SWITCH : "switch">
    | <CASE : "case">
    | <DEFAULT_ : "default">
    | <WHILE : "while">
    | <DO : "do">
    | <FOR : "for">
    | <RETURN : "return">
    | <BREAK : "break">
    | <CONTINUE : "continue">
    | <GOTO : "goto">
    | <TYPEDEF : "typedef">
    | <IMPORT : "import">
    | <SIZEOF : "sizeof">
}

// 标识符
TOKEN : {
    <IDENTIFIER : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])>
}

// 数值
TOKEN : {
    <INTEGER : ["0"-"9"] (["0"-"9"])* ("U")? ("L")?
            | "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+("U")?("L")?
            | "0" (["0"-"7"])*("U")?("L")?
    >
}

// 字符串
MORE:{<"\""> : IN_STRING }
<IN_STRING> MORE : {
     <(~["\"","\\","\n","\r"])+>
    |<"\\" (["0" - "7"]){3}>
    |<"\\" ~[]>
}
<IN_STRING> TOKEN : {<SPACES: "\"">:DEFAULT}

// 字符
MORE:{<"\'"> : IN_STRING }
<IN_STRING> MORE : {
     <(~["\'","\\","\n","\r"])> : CHARACTER_TERM
    |<"\\" (["0" - "7"]){3}>    : CHARACTER_TERM
    |<"\\" ~[]>                 : CHARACTER_TERM
}
<CHARACTER_TERM> TOKEN :{<CHARACTER:"'" > : DEFAULT}

// 跳过空白符
SPECIAL_TOKEN : {<SPACES : ([" ","\t","\n","\r","\f"])+>}

// 跳过行注释
SPECIAL_TOKEN : {<LINE_COMMENT : "//" (~["\n","\r"])* ("\n" | "\r\n" | "\r")?>}

// 跳过块注释
MORE :{ <"/*"> : IN_BLOCK_COMMENT }
<IN_BLOCK_COMMENT> MORE: {<~[]>}
<IN_BLOCK_COMMENT> SPECIAL_TOKEN:{ <IN_BLOCK_COMMENT : "*/"> : DEFAULT}

AST compilation_unit():{}
{
    import_stmts() top_defs() <EOF>
}

String import_stmts():{}
{
    (import_stmt())*
}

String import_stmt():{}
{
    <IMPORT> name()("." name())* ";"
}

String name():{}
{
    <IDENTIFIER>
}

String top_defs():{}
{
    (LOOKAHEAD(storage() typeref() <IDENTIFIER> ")")
      defun()
    | LOOKAHEAD(3)
      defvars()
    | defconst()
    | defstruct()
    | defunion()
    | typedef()
    )*
}

String defvars():{}
{
    storage() type() name() ["=" expr()]
                ("," name() ["=" expr()])* ";"
}

String storage():{}
{
    [<STATIC>]
}

String defun():{}
{
    storage() typeref() name() "(" params() ")" block()
}

String parsms():{}
{
     LOOKAHEAD(<VOID> ")") <VOID>
   | fixedparams() ["," "..."]
}

String fixedparams():{}
{
    param() (LOOKAHEAD(2) "," param())*
}

String param():{}
{
    type() name()
}

String block():{}
{
    "{" defvar_list() stmts() "}"
}

String  defstruct():{}
{
    <STRUCT> name() member_liat() ";"
}

String defunion():{}
{
    <UNION> name() member_list() ";"
}

String member_list():{}
{
    "{" (slot() ";")* "}"
}

String slot():{}
{
    type() name()
}

String typedef() :{}
{
    <TYPEDEF> typeref() <IDENTIFIER> ";"
}

String type():{}
{
    typeref()
}

String typeref():{}
{
    typeref_base()
        ( LOOKAHEAD(2) "[" "]"
        | "[" <INTEGER> "]"
        | "*"
        | "(" param_typerefs() ")"
        )*
}

String typeref_base():{}
{
     <VOID>
   | <CHAR>
   | <SHORT>
   | <INT>
   | <LONG>
   | LOOKAHEAD(2) <UNSIGNED> <CHAR>
   | LOOKAHEAD(2) <UNSIGNED> <SHORT>
   | LOOKAHEAD(2) <UNSIGNED> <INT>
   | <UNSIGNED> <LONG>
   | <STRUCT> <IDENTIFIER>
   | <UNION> <IDENTIFIER>
   | LOOKAHEAD({isType(getToken(1).image)})<IDENTIFIER>
}


String stmts ():{}
{
    (stmt())*
}

String  stmt():{}
{
    (";"
    | LOOKAHEAD(2) labeled_stmt()
    | expr() ";"
    | bolck()
    | if_stmt()
    | while_stmt()
    | dowhile_stmt()
    | for_stmt()
    | switch_stmt()
    | continue_stmt()
    | goto_stmt()
    | return_stmt()
    )
}

String if_stmt():{}
{
    <IF> "(" expr() ")" stmt() [LOOKAHEAD(1) <ELSE> stmt()]
}

String while_stmt():{}
{
    <WHILE> "(" stmt() ")" stmt()
}

String for_stmt():{}
{
    <FOR> "(" [expr()] ";" [expr()] ";" [expr()] ")" stmt()
}

String break_stmt():{}
{
    <BREAK> ";"
}

String return_stmt():{}
{
    LOOKAHEAD(2) <RETURN> ";"
   | <RETURN> expr() ";"
}

String expr():{}
{
     LOOKAHEAD(term() "=")
     term() "=" expr()
    | LOOKAHEAD(term() opassign_op())
     term() opassign_op() expr()
    | expr10()
}

String opassign_op():{}
{
    ( "+="
    | "-="
    | "*="
    | "/="
    | "%="
    | "&="
    | "^="
    | "<<="
    | ">>="
    )
}

String expr10():{}
{
    expr9()["?" expr() ":" expr10()]
}

String expr9():{}
{
    expr8() ("||" expr8())*
}

String expr8():{}
{
    expr7() ("&&" expr7())*
}

String expr7():{}
{
    expr6()( ">" expr6()
            | "<" expr6()
            | ">=" expr6()
            | "<=" expr6()
            | "==" expr6()
            | "!=" expr6()
            )*
}

String expr6():{}
{
    expr5()("||" expr5())
}

String expr5():{}
{
    expr4()("^" expr4())
}

String expr4():{}
{
    expr3()("&" expr3())
}

String expr3():{}
{
    expr2()(  "<<" expr2()
            | ">>" expr2()
            )*
}

String expr2():{}
{
    expr1()(  "+" expr1()
            | "-" expr1()
            )*
}

String expr1():{}
{
    term() ( "*" term()
           | "/" term()
           | "%" term()
           )*
}

String term():{}
{
     LOOKAHEAD("(" type()) ")" term()
   | unary()
}

String unary():{}
{
     "++" unary()
   | "--" unary()
   | "+"  term()
   | "-"  term()
   | "!"  term()
   | "*"  term()
   | "&"  term()
   | LOOKAHEAD(3) <SIZEOF> "(" type() ")"
   | <SIZEOF> unary()
   | postfix()
}

String postfix():{}
{
    primary()
    ( "++"
    | "--"
    | "[" expr() "]"
    | "." name()
    | "->" name()
    | "(" args() ")"
    )*
}

String args():{}
{
    [expr() ("," expr())* ]
}

String primary():{}
{
     <INTEGER>
   | <CHARACTER>
   | <STRING>
   | <IDENTIFIER>
   | "(" expr() ")"
}





