options {
    STATIC = false;
    DEBUG_PARSER = true;
    UNICODE_INPUT = true;
    JDK_VERSION = "1.8";
}

PARSER_BEGIN(Parser)
package parser;
import ast.*;
import entity.*;
import type.*;
import compiler.*;
import utils.*;
import exception.*;
import java.util.*;
import java.io.*;

public class Parser {
    public final static String SOURCE_ENCODING = "UTF-8";

    public static AST parseFile(File file,LibraryLoader loader,ErrorHandler errorHandler) throws SyntaxException ,FileException {
        return parseFile(file,loader,errorHandler,false);
    }

    public static AST parseFile(File file,LibraryLoader loader,ErrorHandler errorHandler,boolean debug) throws SyntaxException ,FileException {
        return newFileParse(file,loader,errorHandler,debug).parse();
    }

    public static Declarations parseDeclFile(File file,LibraryLoader loader,ErrorHandler errorHandler) throws SyntaxException ,FileException {
            return parseDeclFile(file,loader,errorHandler,false);
    }

    public static Declarations parseDeclFile(File file,LibraryLoader loader,ErrorHandler errorHandler,boolean debug) throws SyntaxException ,FileException {
            return newFileParse(file,loader,errorHandler,debug).parseDecls();
    }


    public static Parser newFileParse(File file,LibraryLoader loader,ErrorHandler errorHandler,boolean debug) throws FileException {
            try {
                BufferedReader r = new BufferedReader(new InputStreamReader(new FileInputStream(file),SOURCE_ENCODING));
                return new Parser(r,file.getPath(),loader,errorHandler,debug);
            } catch(FileNotFoundException ex){
                throw new FileException(ex.getMessage());
            }catch (UnsupportedEncodingException ex){
                throw new Error("UTF-8 is not supported??: "+ex.getMessage());
            }
        }

    private String sourceName;
    private LibraryLoader loader;
    private ErrorHandler errorHandler;
    private Set<String> knownTypedefs;

    public Parser(Reader s,String name,LibraryLoader loader,ErrorHandler errorHandler){
        this(s,name,loader,errorHandler,false);
    }

    public Parser(Reader s,String name,LibraryLoader loader,ErrorHandler errorHandler,boolean debug){
        this(s);
        this.sourceName = name;
        this.loader = loader;
        this.errorHandler = errorHandler;
        this.knownTypedefs = new HashSet<String>();
        if(debug){
            enable_tracing();
        } else {
            disable_tracing();
        }
    }

    public AST parse() throws SyntaxException {
        try {
            return compilation_unit();
        } catch(TokenMgrError err){
            throw new SyntaxException(err.getMessage());
        } catch(ParseException err){
            throw new SyntaxException(err.getMessage());
        } catch(LookaheadSuccess err){
            throw new SyntaxException("syntax error");
        }
    }

    public Declarations parseDecls() throws SyntaxException {
        // TODO
        return null;
    }

    private void addKnownTypedefs(List<TypedefNode> typedefs) {
        for(TypedefNode n: typedefs) {
            addType(n.getName());
        }
    }

    private void addType(String name) {
        knownTypedefs.add(name);
    }

    private boolean isType(String name) {
        return knownTypedefs.contains(name);
    }

    private IntegerLiteralNode integerNode(Location location,String image) {
        long i  = integerValue(image);
        if(image.endsWith("UL")) {
            return new IntegerLiteralNode(location, IntegerTypeRef.ulongRef(), i);
        } else if(image.endsWith("L")) {
            return new IntegerLiteralNode(location, IntegerTypeRef.longRef(), i);
        } else if(image.endsWith("U")) {
            return new IntegerLiteralNode(location, IntegerTypeRef.uintRef(), i);
        }else {
            return new IntegerLiteralNode(location, IntegerTypeRef.intRef(), i);
        }
    }

    private long integerValue(String image) {
        String s = image.replaceFirst("[UL]+","");
        if(s.startsWith("0x")||s.startsWith("0X")) {
            return Long.parseLong(s.substring(2),16);
        } else if(s.startsWith("0")&&!"0".equals(s)) {
            return Long.parseLong(s.substring(1),8);
        } else {
            return Long.parseLong(s,10);
        }
    }

    private long characterCode(String image) throws ParseException {
       String s  = stringValue(image);
       if(s.length()!=1) {
            throw new Error("must not happen: character length > 1 ");
       }
        return (long) s.charAt(0);
    }

    private String stringValue(String _image) throws ParseException {
        int pos = 0;
        int idx;
        StringBuffer buf = new StringBuffer();
        String image = _image.substring(1,_image.length() -1);

        while ((idx=image.indexOf("\\",pos)) >= 0) {
            buf.append(image.substring(pos,idx));
            if(image.length() >= idx + 4
                && Character.isDigit(image.charAt(idx + 1))
                && Character.isDigit(image.charAt(idx + 2))
                && Character.isDigit(image.charAt(idx + 3))){
              buf.append(unescapeOctal(image.substring(idx + 1,idx + 4)));
              pos = idx + 4;
            } else {
              buf.append(unescapeSeq(image.charAt(idx + 1)));
              pos = idx + 2;
            }
        }
        if(pos < image.length()) {
            buf.append(image.substring(pos,image.length()));
        }
        return buf.toString();
    }

    private TypeRef size_t() {
        return IntegerTypeRef.ulongRef();
    }

    private static final int charMax = 255;

    private char unescapeOctal(String digits) throws ParseException {
        int i = Integer.parseInt(digits,8);
        if(i > charMax) {
            throw new ParseException("octal character sequence too big: \\" + digits);
        }

        return (char)i;
    }

    private static final char bell = 7;
    private static final char backspace = 8;
    private static final char escape = 27;
    private static final char vt = 11;

    private char unescapeSeq(char c) throws ParseException {
        switch(c) {
            case '0': return '\0';
            case '"': return '"';
            case '\'': return '\'';
            case 'a': return bell;
            case 'b': return backspace;
            case 'e': return escape;
            case 'f': return '\f';
            case 'n': return '\n';
            case 'r': return '\r';
            case 't': return '\t';
            case 'v': return vt;
            default:
            throw new ParseException("unknown escape sequence:\"\\"+c);
        }
    }

    protected Location location(Token t) {
        return new Location(sourceName,t);
    }

}

PARSER_END(Parser)


// 保留字
TOKEN : {
        <VOID     : "void">
      | <CHAR     : "char">
      | <SHORT    : "short">
      | <INT      : "int">
      | <LONG     : "long">
      | <STRUCT   : "struct">
      | <UNION    : "union">
      | <ENUM     : "ENUM">
      | <STATIC   : "static">
      | <EXTERN   : "extern">
      | <CONST    : "const">
      | <SIGNED   : "signed">
      | <UNSIGNED : "unsigned">
      | <IF       : "if">
      | <ELSE     : "else">
      | <SWITCH   : "switch">
      | <CASE     : "case">
      | <DEFAULT_ : "default">
      | <WHILE    : "while">
      | <DO       : "do">
      | <FOR      : "for">
      | <RETURN   : "return">
      | <BREAK    : "break">
      | <CONTINUE : "continue">
      | <GOTO     : "goto">
      | <TYPEDEF  : "typedef">
      | <IMPORT   : "import">
      | <SIZEOF   : "sizeof">
}

// 标识符
TOKEN : {
    <IDENTIFIER : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])*>
}

// 数值
TOKEN : {
    <INTEGER : ["0"-"9"] (["0"-"9"])* ("U")? ("L")?
            | "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+("U")?("L")?
            | "0" (["0"-"7"])*("U")?("L")?
    >
}

// 字符串
MORE:{<"\""> : IN_STRING }
<IN_STRING> MORE : {
     <(~["\"","\\","\n","\r"])+>
    |<"\\" (["0" - "7"]){3}>
    |<"\\" ~[]>
}
<IN_STRING> TOKEN : {<STRING: "\"">:DEFAULT}

// 字符
MORE:{<"\'"> : IN_STRING }
<IN_STRING> MORE : {
     <(~["\'","\\","\n","\r"])> : CHARACTER_TERM
    |<"\\" (["0" - "7"]){3}>    : CHARACTER_TERM
    |<"\\" ~[]>                 : CHARACTER_TERM
}
<CHARACTER_TERM> TOKEN :{<CHARACTER:"'" > : DEFAULT}

// 跳过空白符
SPECIAL_TOKEN : {<SPACES : ([" ","\t","\n","\r","\f"])+>}

// 跳过行注释
SPECIAL_TOKEN : {<LINE_COMMENT : "//" (~["\n","\r"])* ("\n" | "\r\n" | "\r")?>}

// 跳过块注释
MORE :{ <"/*"> : IN_BLOCK_COMMENT }
<IN_BLOCK_COMMENT> MORE: {<~[]>}
<IN_BLOCK_COMMENT> SPECIAL_TOKEN:{ <BLOCK_COMMENT : "*/"> : DEFAULT}

AST compilation_unit():
{
    Token t;
    Declarations impdecls,decls;
}
{
    {
        t = getToken(1);
    }
    impdecls=import_stmts() decls=top_defs() <EOF>
    {
        decls.add(impdecls);
        return new AST(location(t),decls);
    }
}

Declarations import_stmts():
{
    String libid;
    Declarations impdecls = new Declarations();
}
{
    (libid=import_stmt()
        {
            try{
                Declarations decls = loader.loadLibrary(libid,errorHandler);
                if(decls!=null){
                    impdecls.add(decls);
                    addKnownTypedefs(decls.typedefs());
                }
            }catch(CompileException ex){
                throw new ParseException(ex.getMessage());
            }
        }
    )*
    {
        return impdecls;
    }
}

String import_stmt():
{
    StringBuilder bud = new StringBuilder();
     String n;
}
{
    <IMPORT> n=name() { bud.append(n); }
    ("."     n=name() { bud.append(".");bud.append(n); })* ";"
    {
        return bud.toString();
    }
}

String name():
{
    Token t;
}
{
    t=<IDENTIFIER> { return t.image; }
}

Declarations top_defs():
{
    Declarations decls = new Declarations();
    DefinedFunction defun;
    List<DefinedVariable> defvars;
    Constant defconst;
    StructNode defstruct;
    UnionNode defunion;
    TypedefNode typedef;
}
{
    (LOOKAHEAD(storage() typeref() <IDENTIFIER> "(")
      defun=defun()        { decls.addDefun(defun); }
    | LOOKAHEAD(3)
      defvars=defvars()    { decls.addDefvars(defvars); }
    | defconst=defconst()  { decls.addConstant(defconst); }
    | defstruct=defstruct(){ decls.addDefstruct(defstruct); }
    | defunion=defunion()  { decls.addDefunion(defunion); }
    | typedef=typedef()    { decls.addTypedef(typedef); }
    )*
    {
        return decls;
    }
}

List<DefinedVariable> defvars():
{
    List<DefinedVariable> defs = new ArrayList<DefinedVariable>();
    boolean priv;
      TypeNode type;
      String name;
      ExprNode init = null;
}
{
    priv=storage() type=type() name=name() ["=" init=expr()]
    {
        defs.add(new DefinedVariable(priv,type,name,init));
        init = null;
    }
    ("," name=name() ["=" init=expr()]
        {
            defs.add(new DefinedVariable(priv,type,name,init));
            init = null;
        }
    )* ";"
    {
        return defs;
    }
}

boolean storage():
{
    Token t = null;
}
{
    [t=<STATIC>] { return t!=null; }
}

Constant defconst():
{
    TypeNode type;
     String name;
     ExprNode value;
}
{
    <CONST> type=type() name=name() "=" value=expr()
    {
        return new Constant(type,name,value);
    }
}

DefinedFunction defun():
{
    boolean priv;
    TypeRef ret;
    String n;
    Params ps;
    BlockNode body;
}
{
    priv=storage() ret=typeref() n=name() "(" ps=params() ")" body=block()
    {
        TypeRef t = new FunctionTypeRef(ret,ps.parametersTypeRef());
        return new DefinedFunction(priv,new TypeNode(t),n,ps,body);
    }
}

Params params():
{
    Token t;
    Params params;
}
{
     LOOKAHEAD(<VOID> ")") t=<VOID>   { return new Params(location(t),new ArrayList()); }
   | params=fixedparams() ["," "..." { params.acceptVarargs(); }]
   {
        return params;
   }
}

Params fixedparams():
{
    List<Parameter> paramDescs = new ArrayList();
    Parameter param,param1;
}
{
    param1=param(){ paramDescs.add(param1); }
    (LOOKAHEAD(2) "," param=param(){ paramDescs.add(param); })*
    {
        return new Params(param1.location(),paramDescs);
    }
}

Parameter param():
{
    TypeNode type;
     String name;
}
{
    type=type() name=name() { return new Parameter(type,name); }
}

BlockNode block():
{
    Token t;
    List<DefinedVariable> vars;
    List<StmtNode> stmts;
}
{
    t="{" vars=defvar_list() stmts=stmts() "}"
    {
        return new BlockNode(location(t),vars,stmts);
    }
}

List<DefinedVariable> defvar_list():
{
    List<DefinedVariable> result = new ArrayList<DefinedVariable>();
    List<DefinedVariable> vars;
}
{
    (vars=defvars(){ result.addAll(vars); })*
    {
        return result;
    }
}

StructNode  defstruct():
{
    Token t;
    String name;
    List<Slot> memberList;
}
{
    t=<STRUCT> name=name() memberList=member_list() ";"
        {
            return new StructNode(location(t),new StructTypeRef(name),name,memberList);
        }
}

UnionNode defunion():
{
    Token t;
    String name;
    List<Slot> memberList;
}
{
    t=<UNION> name=name() memberList=member_list() ";"
        {
            return new UnionNode(location(t),new UnionTypeRef(name),name,memberList);
        }
}

List<Slot> member_list():
{
    List<Slot> memberList = new ArrayList<Slot>();
    Slot slot;
}
{
    "{" (slot=slot() ";" {memberList.add(slot); })* "}"
        {
            return memberList;
        }
}

Slot slot():
{
    TypeNode type;
    String name;
}
{
    type=type() name=name(){ return new Slot(type,name); }
}

TypedefNode typedef() :
{
    Token t;
    TypeRef real;
    Token name;
}
{
    t=<TYPEDEF> real=typeref() name=<IDENTIFIER> ";"
    {
        addType(name.image);
        return new TypedefNode(location(t), real, name.image);
    }
}

TypeNode type():
{
    TypeRef ref;
}
{
    ref=typeref(){ return new TypeNode(ref); }
}

TypeRef typeref():{
    Token t;
    TypeRef ref;
    ParamTypeRefs params;
}
{
    ref=typeref_base()
        ( LOOKAHEAD(2) "[" "]"              { ref = new ArrayTypeRef(ref); }
        | "[" t=<INTEGER> "]"               { ref = new ArrayTypeRef(ref,integerValue(t.image)); }
        | "*"                               { ref = new PointerTypeRef(ref); }
        | "(" params=param_typerefs() ")"   { ref = new FunctionTypeRef(ref,params); }
        )*
        {
            return ref;
        }
}

TypeRef typeref_base():
{
    Token t,name;
}
{
     t=<VOID>  { return new VoidTypeRef(location(t)); }
   | t=<CHAR>  { return IntegerTypeRef.charRef(location(t)); }
   | t=<SHORT> { return IntegerTypeRef.shortRef(location(t)); }
   | t=<INT>   { return IntegerTypeRef.intRef(location(t)); }
   | t=<LONG>  { return IntegerTypeRef.longRef(location(t)); }
   | LOOKAHEAD(2) t=<UNSIGNED> <CHAR>
        { return IntegerTypeRef.ucharRef(location(t)); }
   | LOOKAHEAD(2) t=<UNSIGNED> <SHORT>
        { return IntegerTypeRef.ushortRef(location(t)); }
   | LOOKAHEAD(2) t=<UNSIGNED> <INT>
        { return IntegerTypeRef.uintRef(location(t)); }
   | t=<UNSIGNED> <LONG>
        { return IntegerTypeRef.ulongRef(location(t)); }
   | t=<STRUCT> name=<IDENTIFIER>
        { return new StructTypeRef(location(t),name.image); }
   | t=<UNION>  name=<IDENTIFIER>
        { return new UnionTypeRef(location(t),name.image); }
   | LOOKAHEAD({isType(getToken(1).image)}) name=<IDENTIFIER>
        { return new UserTypeRef(location(name),name.image);}
}

ParamTypeRefs param_typerefs():
{
    ParamTypeRefs params;
}
{
    LOOKAHEAD(<VOID>")")
    <VOID>
    {
        return new ParamTypeRefs(new ArrayList<TypeRef>());
    }
    | params=fixedparam_typerefs()
        ["," "..." {params.acceptVarargs();}]
    {
        return params;
    }
}

ParamTypeRefs fixedparam_typerefs():
{
    List<TypeRef> refs  =new ArrayList();
    TypeRef ref;
}
{
    ref=typeref() { refs.add(ref); }
    ( LOOKAHEAD(2) "," ref=typeref() { refs.add(ref); })*
        {
            return new ParamTypeRefs(refs);
        }
}

List<StmtNode> stmts():
{
    List<StmtNode> ss = new ArrayList<StmtNode>();
    StmtNode s;
}
{
    (s=stmt(){ if(s!=null) ss.add(s);})*
    {
        return ss;
    }
}

StmtNode stmt():
{
    StmtNode n = null;
    ExprNode e = null;
}
{
    (";"
    | LOOKAHEAD(2) n=labeled_stmt()
    | e=expr() ";" { n = new ExprStmtNode(e.location(),e); }
    | n=block()
    | n=if_stmt()
    | n=while_stmt()
    | n=dowhile_stmt()
    | n=for_stmt()
    | n=switch_stmt()
    | n=break_stmt()
    | n=continue_stmt()
    | n=goto_stmt()
    | n=return_stmt()
    )
        {
            return n;
        }
}

LabelNode labeled_stmt():
{
    Token t;
    StmtNode n;
}
{
    t=<IDENTIFIER> ":" n=stmt()
    {
        return new LabelNode(location(t),t.image,n);
    }
}

IfNode if_stmt():
{
    Token t;
    ExprNode cond;
    StmtNode thenBody,elseBody = null;
}
{
    t=<IF> "(" cond=expr() ")" thenBody=stmt()
            [LOOKAHEAD(1) <ELSE> elseBody=stmt()]
            {
                return new IfNode(location(t),cond,thenBody,elseBody);
            }
}

WhileNode while_stmt():
{
    Token t;
    ExprNode cond;
    StmtNode body;
}
{
    t=<WHILE> "(" cond=expr() ")" body=stmt()
    {
        return new WhileNode(location(t),cond,body);
    }
}

DoWhileNode dowhile_stmt():
{
    Token t;
    StmtNode body;
    ExprNode cond;
}
{
    t=<DO> body=stmt() <WHILE>"(" cond=expr() ")" ";"
    {
       return new  DoWhileNode(location(t),body,cond);
    }
}

ForNode for_stmt():
{
    Token t;
    ExprNode init = null,cond = null, incr = null;
    StmtNode body;
}
{
    t=<FOR> "(" [init=expr()] ";" [cond=expr()] ";" [incr=expr()] ")" body=stmt()
        {
            return new ForNode(location(t),init,cond,incr,body);
        }
}

SwitchNode switch_stmt():
{
    Token t;
    ExprNode cond;
    List<CaseNode> cases;
}
{
    t=<SWITCH> "(" cond=expr() ")" "{" cases=case_clauses() "}"
    {
        return new SwitchNode(location(t), cond, cases);
    }
}

List<CaseNode> case_clauses():
{
    List<CaseNode> clauses = new ArrayList();
    CaseNode n;
}
{
    (n=case_clause() { clauses.add(n); } )*
    [n=default_clause() { clauses.add(n); } ]
    {
        return clauses;
    }
}

CaseNode case_clause():
{
    List<ExprNode> values ;
    BlockNode body;
}
{
    values=cases() body=case_body()
    {
        return new CaseNode(body.location(),values,body);
    }
}

List<ExprNode> cases():
{
    List<ExprNode> values = new ArrayList();
    ExprNode n;
}
{
    (<CASE> n=primary() ":" { values.add(n); })+
    {
        return values;
    }
}

BlockNode case_body():
{
    LinkedList<StmtNode> stmts = new LinkedList();
    StmtNode stmt;
}
{
    (stmt=stmt() { if(stmt!=null) stmts.add(stmt); })+
    {
        // last stmt of case clause must be break stmt.
        if (!(stmts.getLast() instanceof BreakNode)) {
            throw new ParseException("missing break statement at the last of case clause");
        } else {
            return new BlockNode(stmts.get(0).location(),new ArrayList(),stmts);
        }
    }
}

CaseNode default_clause():
{
    BlockNode body;
}
{
    <DEFAULT_>":" body = case_body()
    {
        return new CaseNode(body.location(),new ArrayList(),body);
    }
}

ContinueNode continue_stmt():
{
    Token t;
}
{
    t=<CONTINUE> ";" { return new ContinueNode(location(t)); }
}

BreakNode break_stmt():
{
    Token t;
}
{
    t=<BREAK> ";" { return new BreakNode(location(t)); }
}

GotoNode goto_stmt():
{
    Token t,name;
}
{
    t=<GOTO> name=<IDENTIFIER> ";"
    {
        return new GotoNode(location(t),name.image);
    }
}

ReturnNode return_stmt():
{
    Token t;
    ExprNode expr;
}
{
    LOOKAHEAD(2) t=<RETURN> ";" { return new ReturnNode(location(t),null);}
    | t=<RETURN> expr=expr() ";"   { return new ReturnNode(location(t),expr);}
}

ExprNode expr():
{
    ExprNode lhs,rhs,expr;
    String op;
}
{
     LOOKAHEAD(term() "=")
     lhs=term() "=" rhs=expr()
     {
        return new AssignNode(lhs,rhs);
     }
    | LOOKAHEAD(term() opassign_op())
     lhs=term() op=opassign_op() rhs=expr()
     {
        return new OpAssignNode(lhs,op,rhs);
     }
    | expr=expr10()
     {
        return expr;
     }
}

String opassign_op():{}
{
    ( "+="  {return "+";}
    | "-="  {return "-";}
    | "*="  {return "*";}
    | "/="  {return "/";}
    | "%="  {return "%";}
    | "&="  {return "&";}
    | "^="  {return "^";}
    | "<<=" {return "<<";}
    | ">>=" {return ">>";}
    )
}

ExprNode expr10():
{
    ExprNode c,t,e;
}
{
    c=expr9()["?" t=expr() ":" e=expr10(){ return new CondExprNode(c,t,e); }]
    {
        return c;
    }
}

ExprNode expr9():
{
    ExprNode l,r;
}
{
    l=expr8() ("||" r=expr8(){ l = new LogicalOrNode(l,r); })*
    {
        return l;
    }
}

ExprNode expr8():
{
    ExprNode l,r;
}
{
    l=expr7() ("&&" r=expr7(){ l = new LogicalAndNode(l,r); })*
    {
        return l;
    }
}

ExprNode expr7():
{
    ExprNode l,r;
}
{
    l=expr6()( ">" r=expr6() { l= new BinaryOpNode(l,">",r); }
            | "<"  r=expr6() { l= new BinaryOpNode(l,"<",r); }
            | ">=" r=expr6() { l= new BinaryOpNode(l,">=",r); }
            | "<=" r=expr6() { l= new BinaryOpNode(l,"<=",r); }
            | "==" r=expr6() { l= new BinaryOpNode(l,"==",r); }
            | "!=" r=expr6() { l= new BinaryOpNode(l,"!=",r); }
            )*
            {
              return l;
            }
}

ExprNode expr6():
{
    ExprNode l,r;
}
{
    l=expr5()("|" r=expr5() { l= new BinaryOpNode(l,"|",r); })*
    {
        return l;
    }
}

ExprNode expr5():
{
    ExprNode l,r;
}
{
    l=expr4()("^" r=expr4() { l= new BinaryOpNode(l,"^",r); })*
    {
        return l;
    }
}

ExprNode expr4():
{
    ExprNode l,r;
}
{
    l=expr3()("&" r=expr3() { l= new BinaryOpNode(l,"&",r); })*
    {
        return l;
    }
}

ExprNode expr3():
{
    ExprNode l,r;
}
{
    l=expr2()(  "<<" r=expr2() { l= new BinaryOpNode(l,"<<",r); }
              | ">>" r=expr2() { l= new BinaryOpNode(l,">>",r); }
             )*
             {
                return l;
             }
}

ExprNode expr2():
{
    ExprNode l,r;
}
{
    l=expr1() ( "+" r=expr1() { l= new BinaryOpNode(l,"+",r); }
              | "-" r=expr1() { l= new BinaryOpNode(l,"-",r); }
              )*
              {
                return l;
              }
}

ExprNode expr1():
{
    ExprNode l,r;
}
{
    l=term() ( "*" r=term() { l = new BinaryOpNode(l,"*",r); }
             | "/" r=term() { l = new BinaryOpNode(l,"/",r); }
             | "%" r=term() { l = new BinaryOpNode(l,"%",r); }
             )*
             {
                return l;
             }
}

ExprNode term():
{
    TypeNode t;
    ExprNode n;
}
{
     LOOKAHEAD("(" type())
      "(" t = type() ")" n = term(){ return new CastNode(t,n);}
   | n=unary()                     { return n;}
}

ExprNode unary():
{
    ExprNode n;
    TypeNode t;
}
{
     "++" n=unary() { return new PrefixOpNode("++",n);}
   | "--" n=unary() { return new PrefixOpNode("--",n);}
   | "+"  n=term()  { return new UnaryOpNode("+",n);}
   | "-"  n=term()  { return new UnaryOpNode("-",n);}
   | "!"  n=term()  { return new UnaryOpNode("!",n);}
   | "~"  n=term()  { return new UnaryOpNode("~",n);}
   | "*"  n=term()  { return new DereferenceNode(n);}
   | "&"  n=term()  { return new AddressNode(n);}
   | LOOKAHEAD(3) <SIZEOF> "(" t=type() ")"
     {
           return new SizeofTypeNode(t,size_t());
     }
   | <SIZEOF> n=unary()
     {
         return new SizeofExprNode(n,size_t());
     }
   | n=postfix() { return n; }
}

ExprNode postfix():
{
    ExprNode expr,idx;
    String memb;
    List<ExprNode> args;
}
{
    expr = primary()
    ( "++"               { expr = new SuffixOpNode("++",expr); }
    | "--"               { expr = new SuffixOpNode("--",expr); }
    | "[" idx=expr() "]" { expr = new ArefNode(expr,idx); }
    | "." memb=name()    { expr = new MemberNode(expr,memb); }
    | "->" memb=name()   { expr = new PtrMemberNode(expr,memb); }
    | "(" args=args() ")"{ expr = new FuncallNode(expr,args); }
    )*{
        return expr;
    }
}

List<ExprNode> args():
{
    List<ExprNode> args = new ArrayList();
    ExprNode expr,expr1;
}
{
    [expr1=expr(){ args.add(expr1); } ("," expr=expr(){ args.add(expr); })* ]
    {
        return args;
    }
}

ExprNode primary():
{
    Token t;
    ExprNode n;
}
{
     t=<INTEGER>
     {
        return integerNode(location(t),t.image);
     }
   | t=<CHARACTER>
     {
           return new IntegerLiteralNode(location(t),IntegerTypeRef.charRef(),characterCode(t.image));
     }
   | t=<STRING>
      {
        return new StringLiteralNode(location(t),new PointerTypeRef(IntegerTypeRef.charRef()),stringValue(t.image));
      }
   | t=<IDENTIFIER>
     {
        return new VariableNode(location(t),t.image);
     }
   | "(" n=expr() ")"
    {
        return n;
    }
}